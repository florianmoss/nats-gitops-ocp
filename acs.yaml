---
- hosts: localhost

  tasks:
    - include_vars: vars.yaml

    - name: Use API Token if defined
      set_fact:
        authorization: "Bearer {{ api_token }}"
      when: api_token is defined

    - name: Use username/password if defined
      set_fact:
        authorization: "Basic {{ (username + ':' + password) | b64encode }}"
      when: username is defined and password is defined

    # Create Openshift Authenticator, will either succeed (200) or fail (400) because it already exists
    - name: Insert OpenShift Authentication Provider
      uri:
        url: "https://{{ api_endpoint }}/v1/authProviders"
        method: POST
        validate_certs: no
        headers:
          authorization: "{{ authorization }}"
        body_format: json
        body:
          name: "{{ auth_provider.name }}"
          type: "{{ auth_provider.type }}"
          active: true
          uiEndpoint: "{{ ui_endpoint }}"
          enabled: true
        status_code: [200, 400]

    # Get OpenShift Authenticator to retrieve the ID
    - name: Get Auth Provider Id
      uri:
        url: "https://{{ api_endpoint }}/v1/authProviders?name={{ auth_provider.name }}"
        method: GET
        validate_certs: no
        headers:
          authorization: "{{ authorization }}"
        body_format: json
        status_code: 200
      register: authprovider_result

    # Set the default role for the authenticator, note I use Admin so change for security or comment out!
    - name: Set default role for provider
      uri:
        url: "https://{{ api_endpoint }}/v1/groupsbatch"
        method: POST
        validate_certs: no
        headers:
          authorization: "{{ authorization }}"
        body_format: json
        body:
          previous_groups: []
            # - props:
            #     authProviderId: "{{ authprovider_result.json.authProviders[0].id }}"
            #   roleName: "{{ default_auth_provider_role }}"
          required_groups:
            - props:
                authProviderId: "{{ authprovider_result.json.authProviders[0].id }}"
              roleName: "{{ default_auth_provider_role }}"
        status_code: [200,409,500]

    # Create the permission sets
    - name: Create Permission Sets
      uri:
        url: "https://{{ api_endpoint }}/v1/permissionsets"
        method: POST
        validate_certs: no
        headers:
          authorization: "{{ authorization }}"
        body_format: json
        body: "{{ item }}"
        status_code: [200, 409]
      with_items: "{{ permission_sets }}"

    # Create the access scopes
    - name: Create Access Scopes
      uri:
        url: "https://{{ api_endpoint }}/v1/simpleaccessscopes"
        method: POST
        validate_certs: no
        headers:
          authorization: "{{ authorization }}"
        body_format: json
        body: "{{ item }}"
        status_code: [200, 409]
      with_items: "{{ access_scopes }}"

    # Need to get the permission sets to get IDs for Roles
    - name: Get Permission Sets
      uri:
        url: "https://{{ api_endpoint }}/v1/permissionsets"
        method: GET
        validate_certs: no
        headers:
          authorization: "{{ authorization }}"
        body_format: json
        status_code: 200
      register: permission_set_result

    # Need to get the access scopes to get IDs for Roles
    - name: Get Access Scopes
      uri:
        url: "https://{{ api_endpoint }}/v1/simpleaccessscopes"
        method: GET
        validate_certs: no
        headers:
          authorization: "{{ authorization }}"
        body_format: json
        status_code: 200
      register: access_scope_result

    # Create all of the roles
    - name: Create Roles
      include_tasks: create_role.yaml
      with_items: "{{ roles }}"

    # Now we need to map
    - name: Map role in Provider
      uri:
        url: "https://{{ api_endpoint }}/v1/groupsbatch"
        method: POST
        validate_certs: no
        headers:
            authorization: "{{ authorization }}"
        body_format: json
        body:
            previous_groups: []
            # - roleName: "{{ item.name }}"
            #   props:
            #     authProviderId: "{{ authprovider_result.json.authProviders[0].id }}"
            #     key: "{{ item.group_batch.key }}"
            #     value: "{{ item.group_batch.value }}"
            required_groups:
            - roleName: "{{ item.role_name }}"
              props:
                authProviderId: "{{ authprovider_result.json.authProviders[0].id }}"
                key: "{{ item.key }}"
                value: "{{ item.value }}"
        status_code: [200,500]
      with_items: "{{ role_mappings }}"